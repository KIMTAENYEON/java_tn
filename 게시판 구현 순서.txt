게시판까지 구현하기 
1. spring legacy project 생성 및 서버로 테스트하기 
2. 인코딩 설정 및 테스트하기		(stajun.tistory.com블로그 참고) 
3. 패키지명 변경 
	패키지명 수정 => controller 패키지 
	servlet-context.xml에서 base-package명 수정
4. 타일즈 적용 및 테스트하기 	(stajun.tistory.com블로그 참고) 
5. 각종 패키지 생성 
	service 패키지 
	dao 패키지
	vo 패키지 
6. DB연동		(stajun.tistory.com블로그 참고) 
7. DB연동 테스트 
	MemberService 인터페이스 생성 
	MemberServiceImp 클래스 생성
		MemberService 구현
		@Service를 추가
	MemberDAO 인터페이스 생성 
	src/main/resources 폴더에 mappers 폴더를 생성
		MemberMapper.xml 파일 생성 후 샘플 코드 추가 
		namespace 부분을 현재 프로젝트에 알맞게 수정 
		mapper태그 안에 예제 코드를 삭제 
	MemberVO 클래스 생성 
		테이블 속성과 멤버변수 이름이 같게 생성 
		getter/setter 생성과 toString을 오버라이딩함 
	컨트롤러에 멤버 변수로 MemberService 추가 
		@Autowired 이용 MemberService memberService;
	MemberService에 멤버변수로 MemberDAO 추가
		@Autowired 이용 MemberDAO memberDao;
	서버를 재가동하여 에러가 안나는지 테스트 
	컨트롤러/서비스/다오/매퍼에 샘플 코드 추가 및 테스트 
		DB에 샘플 데이터를 추가 	

8. 회원가입 기능 구현(비밀번호 암호화 적용)	(github.com/st8324/Docs 참고)
	header.jsp 회워가입 링크 추가
	컨트롤러에 회원가입 화면을 보여줄 수 있는 메소드를 추가 
		signup에 GET방식
		보여줄 화면은 /member/signup.jsp로 설정 
	회원가입 화면파일을 생성 (member 폴더에 signup.jsp를 생성)
		회원가입 화면을 구성 
	컨트롤러에 회원가입을 처리하는 메소드를 추가 
		/signup에 POST방식
		회원가입이 정상적으로 진행되면 메인페이지로 이동을 시킴
		회원가입이 정상적으로 진행되지 않으면 회원가입페이지로 이동을 시킴
	컨트롤러에 화면에서 전달한 회원정보를 받아서 확인  
		매개변수를 추가
		생일과 관련해서 에러가 발생할 수 있음 
			원인 : 화면에서는 yyyy-mm-dd로 된 문자열을 전송하는데 생일이 Date클래스로
			 되어 있으면 자동으로 변환이 안됨 String이 Date로 형변환이 안됨.
			해결방법 : setMe_birth(String date)로 setter를 수정하여 문자열로 된 날짜를
			 Date로 변환하는 코드를 작성해야 함 
		화면에 input태크 select태그 등에 name을 MemberVO의 매개변수와 일치하게 설정
	컨트롤러에서 회원정보를 서비스에게 주면서 회원가입하라고 시킴 
		이때 서비스는 회원가입 진행후 가입이 성공했는지 실패했는지 컨트롤러에게 알려줌
	서비스에 회원가입 메소드 추가 
		컨트롤러에서 에러나는 부분 마우스 호버 create method 클릭 
	서비스임플에 회원가입 메소드 추가 
		서비스임플에서 에러나는 부분 마우스 호버 add unimplimented 클릭
	서비스임플에서 회원가입 기능을 구현 
		비밀번호 암호화	(github.com/st8324/Docs 참고)
		다오에게 회원가입 정보를 전달하면서 가입하라고 시킴
	다오에 회원가입 메소드 추가
		서비스임플에서 에러나는 부분 호버후 create method 클릭
		@Param("이름")을 매개변수 앞에 추가 
	매퍼에 쿼리문 구현 
		id에 다오에 추가한 메소드명을 입력 
		쿼리문 구현
			매개변수로 넘어오는 값은 #{ }을 이용하고, 
			 넘겨주는 값이 정수나 문자열이 아니면 #{객체명.멤버변수명}으로 호출
9. 로그인 기능 구현 (Interceptor를 이용한 로그인 유지 적용)
	header.jsp에 링크 추가 
	컨트롤러에서 메소드 추가 및 코드 구현 
	로그인 화면 구성 
		form태그 이용
		name 설정 
	로그인 시도시 컨트롤러에서 회원 정보가 잘 오는지 확인 
	서비스와 서비스임플에 코드를 구현 
		비밀번호 암호와를 이용하여 비밀번호를 확인 
	다오에 메소드를 추가 
	매퍼에 쿼리문을 추가 
		resultType 설정 시 오타 조심 
	로그인 유지 기능 구현 	(github.com/st8324/Docs 참고)
		
10. 로그아웃 기능 구현 
	로그아웃 링크 추가
	컨트롤러에 로그아웃 코드 구현 
11. 인터셉터를 이용하여 회원만 게시글 등록/수정/삭제가 되도록 처리 (github.com/st8324/Docs 참고)
	다음 URL에 대하여 회원만 접근하도록 인터셉터를 생성후 처리 (MemberInterceptor)
		/board/register
		/board/modify
		/board/delete
12.인터셉터를 이용하여 비회원만 로그인/회원가입이 되도록 처리	(github.com/st8324/Docs 참고)
	다음 URL에 대하여 로그인하지 않은 비회원만 접근하도록 인터셉터를 생성후 처리 (GuestInterceptor)
		/login
		/signup
13. 게시글 리스트 확인 구현 
	URL : /board/list
	게시글 링크 등록 
	보드 컨트롤러, 보드 서비스, 보드 서비스임플, 보드 다오, 보드 매퍼, 보드 VO추가
		컨트롤러 클래스 생성수 @Controller 추가
		서비스는 인터페이스로 생성 후 implements를 이용하여 서비스 구현 
		서비스임플은 클래스로 생성 후 @Service 추가
		다오는 인터페이스로 생성 
		매퍼는 xml로 생성후 namespace
	컨트롤러에 게시글 리스트 확인하는 메소드 등록 및 코드 구현 
	서비스와 서비스 임플에 게시글 가져오는 메소드 등록 및 구현 
	다오와 매퍼에 게시글 가져오는 메소드 등록 및 쿼리문 작성 
	확인  
14. 게시글 상세 확인 
	/board/detail
	게시글 리스트에서 게시글 제목 링크를 수정 
	컨트롤러에서 해당 메소드 처리하는 코드 등록 및 구현 
	서비스/서비스임플에서 메소드 등록 및 구현 
	다오/매퍼에서 메소드 등록 및 구현 
	게시글 상세 화면 구현  

15. 게시글 등록 
	/board/register
	게시글 리스트에서 게시글 등록 버튼을 추가 
		등록 버튼 클릭하면 /board/register로 이동 
	게시글 등록 화면 구현 (get)
		컨트롤러에 해당 URL을 담당하는 메소드 등록 및 코드 구현 
		기본 등록화면 jsp 생성
		게시글 등록 화면 구현
			form태그 이용 
				method는 post로
	게시글 등록 기능 구현 (post)
		테스트 시 로그인을 꼭 해야 테스트 가능 
		컨트롤러에 게시글 등록하는 메소드 등록 및 코드 구현 
			게시글 등록 후 완료되면 /board/list로 이동하도록 처리 
			화면에서 입력한 게시글이 오는지 확인 
			로그인한 사용자 정보를 확인 
			서비스에게 일을 시킴 
		서비스/서비스임플에 메소드 등록 및 구현
			게시글 제목이 있는지 확인  
		다오/매퍼에 메소드 등록 및 쿼리 구현
			insert문을 이용  
16. 게시글 수정 
 	/board/modify
	게시글 상세에서 게시글 수정 버튼을 추가 
		작성자와 로그인한 유저가 같은 경우만 보이도록 작성
	게시글 수정 화면 (get)
		컨트롤러에 메소드 등록 및 코드 구현 
		게시글 수정 화면 jsp 생성 
		컨트롤러에서 수정한 게시글 번호 확인
		컨트롤러에서 회원정보 확인 
		서비스에게 게시글 가져오라고 시킴 
		게시글의 작성자와 회원 아이디가 일치하면 수정 화면으로 이동
		게시글의 작성자와 회원 아이디가 일치하지않으면 게시글 상세로 이동
		가져온 게시글 정보를 게시글 수정화면에 출력
			form태그 이용
				method는 post로
	게시글 수정 기능 구현 (post)
		컨트롤러에서 메소드 등록 및 코드 구현 
			수정을 다하면 게시글 상세로 이동 
			수정된 게시글 정보 확인 
			로그인한 회원 정보 확인 
			서비스에게 수정하라고 시킴 
		서비스/서비스임플에 메소드 등록 및 구현 
			접속한 회원이 작성자인지 확인하여 일치하면 게시글 수정 
		다오/매퍼에 메소드 등록 및 쿼리 구현 
			수정된 게시글 정보를 DB에 업데이트
17. 게시글 삭제 
	/board/delete
	게시글 상세에서 삭제 버튼을 추가 
		작성자만 보이도록 작업 
		버튼을 클릭하면 삭제 링크로 이동하도록 작업 
		수정버튼 참고 
	컨트롤러에서 메소드 등록 및 코드 구현 
		get방식으로 등록 
		삭제를 다하면 /board/list로 이동 
		삭제할 게시글 번호를 확인 
		로그인한 회원을 확인 
		서비스에게 삭제하라고 시킴 
			필요한 매개변수 설정을 잘 해야함 
	서비스/서비스임플에 메소드 등록 및 구현 
		유효한 번호인지 확인 
			유효하지 않으면 삭제 종료
		번호와 일치하는 게시글 가져옴
		게시글이 없으면 삭제 종료 
		게시글이 있으면 게시글 작성자와 로그인한 회원 아이디가 같은지 확인 
			같으면 게시글 삭제 
			다오에게 해당 게시글의 bd_del속성을 Y로 수정하라고 시킴 
	다오/매퍼에 메소드 등록 및 쿼리를 구현 
		다오에 메소드 등록 후 @Param
		update 쿼리문 작성 
18. 첨부파일 추가 		(github.com/st8324/Docs 참고)
	기존 게시글에 첨부파일 등록하는 기능을 추가 
		업로드를 위한 의존성 추가 pom.xml
		servlet-context.xml에 업로드 크기 설정
		패키지 생성 및 UploadFileUtils 클래스 추가 
			
	1. 게시글 등록할 때 첨부파일 기능 추가 
		register.jsp에 form태그 속성으로 enctype을 추가하고 값을 설정 
			enctype="multipart/form-data"
		register.jsp에 첨부파일을 선택할 수 있도록 input태그를 추가 
			<input type="file" name="files">
		컨트롤러에서 첨부파일을 받을 수 있도록 매개변수를 추가 
			/board/register post에 추가
			//이름은 register.jsp에 있는 name과 일치해야 함  
			List<multipartFile> files
		컨트롤러에서 서비스에게 시킨 게시글 등록 기능에 첨부파일을 추가
		서비스에 게시글 등록 메소드를 수정 첨부파일을 매개변수로 추가
		서비스임플에 첨부파일을 매개변수로 추가
		게시글을 등록하고 나서 등록된 게시글의 게시글 번호를 가져오도록 xml수정
			BoardMapper.xml에 다음 코드를 추가
				useGeneratedKeys="true" 
				keyProperty="board.bd_num" 
				parameterType="kr.green.green.vo.BoardVO">
			KeyProperty
				board다오에서 정한 이름 다오에서 @Param("xxx")에서 xxx에 해당
				bd_num VO의 기본키 이름 
			parameterType
				현재 진행중인 프로젝트의 패키지명과 VO명을 가져오면 됨 
		서비스임플에 첨부파일 등록 기능 
			반복문을 이용하여 첨부파일이 있으면 서버에 업로드 하고, 
			 다오에게 첨부파일을 등록하도록 시킴
			서비스임플에 첨부파일 경로를 멤버변수로 추가 
				실제 폴더 경로
			FileVO 생성 
				테이블 속성 이름과 vo멤버 변수 이름을 일치시켜야 함
				파일명, 경로파일명, 게시글 번호를 이용한 생성자 추가 
				기본생성자 추가 @NoArgsConstructor
			다오에 메소드 추가 및 매퍼에 쿼리문 추가 
	2. 게시글 확일 할 때 첨부파일 목록을 확인하고 클릭시 다운기능 추가
		컨트롤러에서 게시글 번호와 일치하는 첨부파일들을 가져오라고 서비스에게 시킴 
			/board/detail
			가져온 첨부파일들을 화면에 전송
		서비스/서비스임플에 메소드 추가 및 구현 
			게시글번호가 유효하지 않으면 종료
			다오에게 게시글 번호와 일치하는 첨부파일을 가져오라고 시킴 
		다오/매퍼에서 메소드 추가 및 쿼리문 구현
			매퍼에 select문
			다오에@Param 추가
		detail.jsp에 첨부파일 내용을 뿌려줌
			a태그 이용 
			<c:forEach></c:forEach> 이용
			다운로드를 위해 링크 설정 
				/board/download
		컨트롤러에 다운로드를 위한 메소드 추가 
			샘플 코드 참고
	3. 게시글 수정할 때 첨부파일 수정 기능 추가 
		컨트롤러에서 첨부파일을 가져옴 
			/board/modify GET
			가져온 첨부파일을 화면에 전달
		modify.jsp에서 서버에서 보내준 첨부파일을 뿌려줌
			a태그 아님
			x버튼을 만듬 (a태그)
				클릭하면 첨부파일 내용 사라지고, input태그 file추가
			첨부파일 번호를 input태크 hidden로 추가
			남은 첨부파일 갯수만큼 input태그 file로 추가
		modify.jsp에 enctype을 추가
			enctype="multipart/form-data"
		컨트롤러에서 추가된 첨부파일과 기존 첨부파일 번호를 화면에서 받아옴
			/board/modify POST
			기존 첨부파일 번호들을 확인 
		컨트롤러에서 서비스에게 첨부파일들과 첨부파일 번호들을 같이 넘겨주면서 수정하라고 시킴 
		기존 서비스 메소드에 매개변수 추가
		기존 서비스임플 메소드에 매개변수 추가 후 첨부파일 수정 코드 구현 
			fileNums에 없는 첨부파일을 삭제 후 DB에서 삭제처리
				DB에 삭제처리를 위해 다오에게 삭제하라고 요청
		다오와 메소드 추가 및 매퍼에 쿼리문 구현 
			다오에 @Param추가
			매퍼에 update문 이용
			selectFileList에 조건 추가
				삭제되지 않은 첨부파일만 가져오도록 수정
		서비스임플에서 새로 추가된 첨부파일 등록 
	4. 게시글 삭제할 때 첨부파일 삭제기능 추가 
		서비스임플에서 게시글 삭제 후 첨부파일도 삭제(게시글 삭제 방식에 따라 순서가 달라질 수 있다)
19. 게시글에 페이지네이션 적용 	(github.com/st8324/Docs 참고)(Pagination)
	pagination패키지, Criteria클래스, PageMaker클래스 추가
	/board/list에 매개변수로 Criteria 객체를 추가
		페이지 정보에 맞게 게시글과 페이지네이션 정보를 보여주기 위해서 화면에서 페이지 정보를 받아옴
	컨트롤러가 서비스에게 게시글 가져오라고 시킬 때 현재 페이지 정보도 같이 넘겨줌 
	서비스에 있는 게시글 가져오는 매소드에 현재 페이지 정보를 매개변수로 추가 
	서비스임플에서 다오에게 현재 페이지 정보를 추가로 줌
	다오에 매개변수(현재페이지 정보)를 추가
	매퍼에 limit문 추가
	컨트롤러에서 서비스에게 총게시글(일반)수를 알려달라고 시킴
	가져온 게시글 수와 설정한 한페이지네이션의 페이지수, 매개변수로 전달받은 현재 페이지 정보를
	 이용하여 페이지 메이커를 만듬 
	페이지 메이커를 화면에 전달
	서비스/서비스임플에 메소드 추가 및 구현
		서비스임플에서 다오에게 type에 맞는 게시글 전체수를 가져오라고 시킴
	다오/매퍼에 메소드 등록 및 쿼리로 구현
		select문을 이용
	list.jsp에서 페이지메이커를 이용하여 출력함 
20. 게시글 검색 기능 적용
	/board/list.jsp에 게시글 검색창 추가
		name지정
		form태그
	Criteria 수정
		멤버변수 search를 추가
		생성자에 search를 초기화
	매퍼에서 게시글 검색 시 검색어 반영되도록 조건 추가 
		조건은 게시글 제목에 검색어가 포함된 경우
	컨트롤러에서 총 게시글 수 가져올 때 현재 페이지 정보도 같이 넘겨줌
		가져온 게시글 수가 검색어가 포함되게 하기 위해
	서비스/서비스임플에서도 게시글 수 가져올 때 페이지 정보 같이 넘겨줌
	매퍼에 게시글수 가져오는 쿼리에 검색 조건을 추가
	/board/list.jsp에 페이지네이션 링크에 검색어 추가 
21. 답변 글쓰기
	detail.jsp에 답변 버튼을 추가
		/board/register
		버튼 클릭시 어느 게시글에 답변인지를 알게하기 위해서 bd_ori_num을 전달
			/board/register GET 전달
	컨트롤러에서 bd_ori_num을 받아서 화면에 전달
		/board/register GET
	register.jsp에 답변에서 넘겨준 bd_ori_num의 값을 hidden으로 추가
		<c:if>를 이용하여 bd_ori_num이 null이 아닐때만 추가
	매퍼에 bd_ori_num이 0이 아닐때 쿼리를 추가 
		insert문에 insertBoard
		<if>태그를 이용하여 쿼리문 구성 
	매퍼에 정렬방법을 수정 
		게시글 가져오는 매퍼 
		select문에 getBoardList
		order by 속성1 정렬방법, 속성2 정렬방법
	게시글 리스트에서 답변처럼 보이게 수정 
		/board/list.jsp
	게시글 상세에서 답변인 경우 답변 버튼을 제거 
22. 공지사항
	header.jsp에서 공지사항 링크 수정 또는 추가
	Criteria에 멤버변수 type을 추가 
		생성자에 type을 "일반"으로 초기화 
	컨트롤러/서비스/서비스임플/다오 수정 
		/board/list GET
			게시글 가져오는 메소드에 매개변수 type을 제거 
			게시글 전채 갯수 가져오는 메소드에 매개변수 type을 제거
		/board/register POST
			게시글 타입을 제거
	매퍼 수정 
		게시글 가져오는 쿼리문에 type 대신 cri.type으로 수정
		게시글 전체 갯수 가져오는 쿼리문에 type대신 cri.type으로 수정
	register.jsp 수정
		input태그 hidden으로 게시글 타입을 설정
			bd_type이 null이면 일반으로 값을 지정 아니면 컨트롤러에서 넘겨 받은 값으로 지정
	header.jsp에서 공지사항 링크 수정
	list.jsp에서 글쓰기 버튼 링크 수정 
	컨트롤러 수정
		/board/register GET
			url로 전달한 bd_type을 매개변수로 추가 
			화면에 bd_type을 전달 
		/board/register POST
			게시글 등록 후 리다이렉트 할 때 type값을 전달 
	list.jsp 수정
		페이지 네이션 링크에 type을 추가 
		검색창 안에 input태그 hidden으로 type을 추가 
		h1태그에서 게시글 부분을 수정해서 공지사항/게시글이 보이도록 함 
	detail.jsp 수정
		공지사항에는 답변이 불가능하도록 
23. 공지사항을 관리자만 작성할 수 있게 작업
	member테이블에 me_authority속성을 추가
		기본값은 회원 슈퍼관리자/관리자/회원
	member 테이블 데이터에 가입된 회원 중 몇몇을 관리자로 설정
	MemberVO에 me_authority 멤버변수 추가
	컨트롤러에서 공지사항을 등록/수정/삭제할 때 관리자인지 확인하도록 수정
		상황에 따라 서비스/서비스임플에 수정해도 됨
		아래 수정되는 위치는 변경될 수 있음 
		/board/register POST
		/board/delete GET
24. 조회수 증가
	board 테이블에 조회수 속성을 추가
		bd_views
		정수 기본값으로 0, NOT NULL 
	BoardVO에 멤버변수 bd_views추가 	
	게시글 상세를 들어갈때마다 조회수를 증가하도록 추가 
		컨트롤러/서비스/서비스임플/다오/매퍼에 추가
	list.jsp에 조회수 확인하는 부분 추가
25. 써머노트 에디터 적용 
	Getting started에서 부트스트랩4용 써머노트 js와 css연결 (summernote.org)
	register.jsp와 modify.jsp에 샘플코드 추가 후 선택자 수정
	첨부파일 name 수정 
		files가 아니도록 수정
		써머노트에서 이미지 추가하는 input태그 name files이기 때문에
	위에서 name을 수정하기 때문에 컨트롤러에서 매개변수 이름 수정 
		/board/register POST
		/board/modify POST
	detail.jsp에 내용 출력하는 부분을 textarea태그를 div태그로 수정 후 min-height와 height값을 수정
26. 아이디 중복확인
	ajax를 사용하기 위한 의존성 추가 	(github.com/st8324/Docs 참고)
		버전 1.9.13
		버전 2.13.1
	signup.jsp
		아이디 중복확인 버튼을 추가 
			아이디 지정
			type은 button
		아이디 중복확인 버튼 클릭이벤트 등록
			등록되는지 콘솔에 확인 
			입력한 아이디 값을 확인
			ajax를 이용하여 중복확인하는 코드를 작성 
				입력한 아이디를 서버에 전달 
				get
				처리 결과를 알림창으로 알려줌 
		회원가입버튼 클릭시 아이디 중복체크를 했는지 판단하여 회원가입을 진행해야함 
		아이디가 변경되면 중복확인 다시하도록 처리 
			아이디 부분에 change 이벤트를 등록
				중복체크 다시하도록 작성
	HomeController
		아이디 중복확인 하는 메소드 추가 
			@RequestMapping, @ResponseBody
			get			
			아이디를 넘겨 받아서 서비스에게 전달
				아이디가 있으면 "false"문자열을 전달하고, 없으면 "true"문자열을 전달하도록 서비스에게시킴
	MemberService/MemberServiceImp
		메소드 추가 
		Imp
			다오에게 아이디 주면서 회원 정보 가져오라고 시킴
			가져온 회원정보가 있으면 "false"를 없으면 "true"를 반환 
27. 댓글 달기
	comment 테이블 생성
	CommentVO 추가
	CommentController 추가
	CommentService, CommentServiceImp, COmmentDAO, CommentMapper 생성
	1. 댓글 등록 기능
		화면 구성(detail.jsp)
			댓글 입력할 수 있는 textarea와 등록버튼을 추가
			form태그로 감싸지 않음(ajax로 할거라서)
		댓글 등록 기능
			등록 버튼 이벤트 추가(detail.jsp)
  				등록 버튼 클릭 시 동작하는지 확인
				로그인한 아이디 확인
				로그인 안햇으면 등록 안되게 처리
				입력한 댓글 가져오기
				게시글 번호 가져오기
				가져온 댓글, 게시글 번호를 ajax로 서버에 전송
  				post
			서버에서 등록 처리
				Controller 메소드 추가
					넘겨받은 게시글 번호, 댓글 확인
					로그인한 회원 정보 확인
					서비스에게 게시글 번호, 댓글, 회원정보 주면서 등록하라고 시킴
					등록 결과를 화면에 전송
				Service/ServiceImp 메소드 추가
					회원 정보가 없거나 댓글 정보가 없으면 실패를 알림
					댓글 작성자에 회원 아이디를 넣음
					다오에게 댓글 정보를 주면서 DB에 추가하라고 시킴
				Dao/Mapper 메소드 추가
					Dao에 @Param 추가
					Mapper에 insert문 구현
	2. 댓글 확인 
		화면 구현 (detail.jsp)
			댓글들을 확인할 수 있게 샘플을 이용하여 댓글 화면 구성 
			샘플을 이용하여 댓글 페이지네이션 구성  
		댓글 불러오기 
			detail.jsp
				ajax를 이용하여 컨트롤러에 댓글리스트와 페이지네이션정보를 요청
					get 방식
					게시글 번호와 페이지 번호를 넘겨줌
					서버에서 보내준 댓글 리스트와 페이지네이션 정보를 화면에 배치
			컨트롤러
				게시글 번호 확인
				페이지 번호 확인
				한 페이지에 보이는 댓글 갯수 : X개, 한 페이지네이션에 페이지번호 갯수 : Y개로 설정
					X : 5개, Y : 5개로 설정
				서비스에게 게시글 정보와 현재 페이지 정보를 넘겨 주면서 댓글 리스트 달라고 요청
				가져온 댓글 리스트를 Map에 추가
				서비스에게 게시글 정보를 주면서 전체 댓글 수를 요청
				전체 댓글 수, 페이지갯수, 현재 페이지 정보를 이용하여 페이지메이커 생성 후 Map에 추가
			서비스/서비스임플
				게시글 정보와 현재 페이지 정보를 이용하여 댓글 리스트를 가져오는 메소드 추가
				다오에게 게시글 정보와 현재 페이지 정보를 이용하여 댓글 리스트를 가져오라고 시킴
				게시글 정보와 일치하는 댓글 갯수를 가져오는 메소드 추가 
				다오에게 게시글 정보와 일치하는 댓글 갯수를 가져오라고 시킴
			다오/매퍼
				다오
					메소드 추가
				매퍼
 					게시글 번호와 현재 페이지 정보를 이용하여 댓글 리스트 가져오는 쿼리문 작성
					게시글 번호와 일치하는 게시글 수를 가져오는 쿼리문 작성
	3. 댓글 삭제
		삭제 기능 구현
			detail.jsp
				삭제버튼 클릭 이벤트 등록
					이벤트 동작 테스트
					클릭한 버튼의 댓글 번호를 확인
					ajax를 이용하여 서버에 댓글 번호 전송
						Get
						commentService에 delete 메소드 등록 후 호출
						서버에서 보내준 결과 확인한 후 알림창 띄움
						삭제에 성공하면 댓글 새로고침
			컨트롤러
				메소드 추가
				화면에서 넘겨준 댓글 번호 확인
				로그인한 회원 정보 확인
				서비스에게 번호와 회원정보 주면서 삭제하라고 시킴
				삭제 성공하면 true, 실패하면 false를 화면에 전달
			서비스/서비스 임플
				메소드 추가
				예외처리
					회원정보 없거나 번호가 잘못되면 false 리턴
				댓글 번호와 일치하는 댓글 가져옴
				댓글이 있거나 작성자와 회원아이디가 다르면 false 리턴
				아니면 다오에게 댓글 번호 전달하여 삭제 요청 후 true 리턴
			다오/매퍼
				메소드 추가
				update문을 이용하여 댓글을 삭제 처리
	4. 댓글 수정
		화면 구성 (detail.jsp)
			수정 버튼 클릭 이벤트 등록 
				이벤트 확인 
				수정 버튼을 누른 댓글의 내용 부분을 감추고 해당 위치에 textarea태그를 추가
					기존 댓글 내용이 textarea태그에 들어가야함
				수정 버튼을 누른 댓글의 답글, 수정, 삭제 버튼을 감추고 댓글수정버튼 추가
				주의사항
					수정 버튼 클릭 시 이전에 눌렸던 수정 버튼을 취소하는 작업이 필요
		수정 기능 구현
			화면 (detail.jsp)
				댓글 수정 버튼 클릭 이벤트 등록
					댓글 수정 버튼 클릭 이벤트 확인 
					수정할 댓글 번호 가져오기 
					수정할 댓글 내용 가져오기 
					ajax를 이용하여 댓글 번호와 댓글 내용을 서버에 전송
			컨트롤러 
				메소드 추가 
					화면에서 보내준 댓글 내용을 확인 
					로그인한 회원 정보 확인 
					서비스에게 댓글 정보와 회원 정보를 주면서 수정하라고 요청 
					수정에 성공하면 true, 실패하면 false를 리턴
			서비스/임플
				메소드 추가
					회원정보가 없거나 댓글 정보가 없으면 false를 리턴
					댓글 번호와 일치하는 댓글을 DB에서 가져와서 확인 
					DB에서 가져온 댓글의 작성자와 로그인한 유저가 다르면 false를 리턴 
					같으면 다오에게 댓글 정보를 주면서 수정하라고 요청 
			다오/매퍼
				메소드 추가/쿼리문 등록 
					댓글 내용을 수정하는 쿼리문 작성(update)
	5. 댓글의 답글 등록
		화면 구성 (detail.jsp)
			답글 버튼 클릭 이벤트 등록
				답글 버튼 클릭 이벤트 동작 확인
				textarea 태그와 button 태그를 이용하여 화면 구성
		답글 기능 구현
			화면 (detail.jsp)
				답글 등록 버튼 클릭 이벤트 등록
					답글 등록 버튼 클릭 이벤트 동작 확인
					답글하려는 댓글 번호 가져옴
					답글 내용 가져옴
					게시글 번호를 가져옴
					답글 정보를 서버에 전송
						url : /comment/insert
			매퍼
				co_ori_num이 0이면 기존 등록
				co_ori_num이 0이 아니면 쿼리문 추가
28. 추천/비추천
	화면 구성 (detail.jsp)
		추천/비추천 버튼을 배치
		버튼 클릭 이벤트를 등록 
			이벤트 작동 확인
			ajax를 이용하여 서버로 데이터 전송
				아이디, 게시글 번호, 추천 상태
	LikesVO를 추가
	컨트롤러에 ajax 동작 구현
		메소드를 추가
		매개변수 확인 (ajax로 넘겨준 데이터를 확인)
 		서비스에게 회원 정보, 추천 정보 주면서 DB에 추가하라고 시킴
	서비스/임플
		이전 추천 정보가 없으면 DB에 추가
			다오에게 추천 정보 주면서 등록하라고 시킴
		이전 추천 정보가 있으면 DB에 수정 
			이전 추천 상태와 같으면 취소, 다르면 변경된 상태로 수정
			변경된 추천상태를 이용하여 DB에 수정하도록 다오에게 시킴
		최종 상태를 리턴
	다오/매퍼
		추천 정보를 추가하는 쿼리문 작성
		추천 정보를 수정하는 쿼리문 작성
	추천/비추천 했을 때 버튼에 표시
		화면 로딩시, 추천/비추천 버튼 클릭 후 동작하는 함수 생성 
		ajax로 서버에 게시글 번호를 넘겨줘서 해당 게시글에 맞는 추천/비추천 상태를 가져옴
		0이면 버튼에 표시를 안하고, 1이면 추천버튼에 표시, -1이면 비추천 버튼에 표시
29. 회원 정보 수정
	회원 정보 수정 조건
		비번을 입력하지 않으면 기존 비번을 활용
		주소를 입력하지 않으면 기존 주소를 활용
		비번/주소를 입력하면 입력한 주소를 수정
	회원정보 수정 링크 추가 (header.jsp)
		로그인한 회원만 접근가능하도록 처리
			header.jsp에서 c:if태그를 이용
			servlet-context.xml에서 인터셉터에서 처리 
	회원 정보 페이지 접근 가능하도록 컨트롤러에서 메소드 등록(GET, POST를 같이 처리)
	회원 정보 수정 페이지 생성 및 구현 (/member/modify.jsp)
		form태그 이용
	컨트롤러에서 생성 메소드에 화면에서 넘겨준 정보를 이용하여 회원 정보를 수정
		비번이 비어 있으면 이전 비번으로 수정
		비번이 있으면 암호화 하여 수정
		주소가 없으면 이전 주소로 수정
		권한은 이전 권한으로 수정
30. 아이디 찾기 
	로그인화면에서 아이디/비번찾기 버튼을 추가(링크)(/member/login.jsp)
	컨트롤러에 해당 URL 담당하는 메소드 추가 
	아이디/비번찾기 화면을 구성
		아이디 찾기를 클릭하면 아이디 찾을수 있는 화면 
		비번 찾기를 클릭하면 비번을 찾을 수 있는 화면
	아이디 찾기 기능 구현
		아이디 찾기 버튼 클릭 이벤트 등록 
			이벤트 확인 
			서버로 보내줄 데이터 확인 
				이메일, 이름
			ajax를 이용하여 서버로 데이터를 보냄
			서버에서 보내준 정보를 이용하여 알림창으로 아이디 정보 출력
		컨트롤러에서는 화면에서 보내준 정보를 이용하여 일치하는 회원의 아이디를 화면에 전송
31. 비밀번호 찾기
	이메일로 비번을 보내는 방법으로 비번 찾기를 함
	참고문서 
	비밀번호 찾기 버튼 이벤트 등록
		이벤트 확인 
		서버에 보낼 정보를 확인 
			아이디와 이메일
		ajax를 이용하여 정보를 서버에 전송 
		메일 전송이 완료되면 알림창을 띄움 
	컨트롤러 
		화면에서 전송한 정보 확인 
		서비스에게 회원 정보를 주면서 새비밀번호를 발급하도록 일을 시킴
	서비스
		회원 정보와 일치하는 회원이 있으면 새 비밀번호를 생성 
		새 비밀번호를 암호화 하여 DB에 저장
		새 비밀번호를 이메일로 전송 
32. 회원정보 권한 변경 
	슈퍼 관리자만 회원 변경이 가능 
	회원 등급변경화면을 생성(/admin/member/modify.jsp)
		tiles.def.xml에 수정
		jsp추가
		컨트롤러에 메소드 추가
		회원 정보 가져옴 
	등급을 변경하면 ajax를 이용하여 회원 등급을 변경하도록 작성
		권한이 변경 시 동작하는 이벤트를 등록
			이벤트를 확인
			서버에 전송할 정보를 확인
			서버에 전송
			서버에서 알려준 내용을 토대로 알림창을 띄움
		컨트롤러에서 화면에서 보내준 내용을 확인
		서비스에게 권한을 변경하라고 시킴
33. 자동 로그인 
	MemberVO
		me_auto_login 멤버변수 추가 
		me_session_id, me_session_limit 추가
	login.jsp
		자동 로그인 체크박스 추가
	Home컨트롤러 
		로그인 시도를 했을 때 LoginInterceptor에 로그인한 회원 정보 보내기전에
		 자동로그인을 체크 했는지 안했는지 여부도 같이보냄
		로그아웃 시도시
			회원 정보에 있는 me_session_id에 none을 저장하고 me_session_limit에 로그아웃 시간을 저장
	LoginInterceptor 수정(이전 코드 참고)
		로그인한 회원 정보가 있고, 자동 로그인이 체크 됐으면 
			쿠키를 생성하여 현재 세션id값을 value로 넣어줌
			쿠키의 유지시간을 1주일로 설정 
			생성된 쿠키를 response에 실어서 보냄 
	AutoLoginInterceptor 추가
		sevlet-context.xml에 설정 
		preHandle에서 자동 로그인 기능을 구현 
			쿠키 정보를 가져옴
			쿠키가 있으면 
				쿠키 값을 가져와서 쿠키값과 일치하는 me_session_id를 가진 회원이 있으면 회원정보를 가져옴
				가져온 회원 정보를 세션에 저장
34. 회원가입시 유효성 검사 (정규 표현식)
